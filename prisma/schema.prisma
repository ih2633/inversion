// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {

  id                String @id @default(cuid())
  title             String
  content           String   @db.Text
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  updatedAt         DateTime @default(now()) @updatedAt @db.Timestamp(0)
  user              User      @relation(fields: [userId], references:[id])
  userId            String
  favorite          Favorite?
  Category          Category @relation(fields: [categoryId],references:[id])
  categoryId        String
}

model Category {
  id              String @id @default(cuid())
  name            String @unique
  Articles        Article[]
}

model Favorite{

  id              String  @id @default(cuid())

  article         Article @relation(fields: [articleId], references:[id])
  articleId       String @unique
  user            User[]
  amount        Int @default(0)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

